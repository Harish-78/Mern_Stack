// AddForms.jsx
import React, { useState, useEffect } from "react";
import Navbar from "../layout/Navbar";
import { Card, CardContent, TextField, Typography } from "@mui/material";
import { MdInput } from "react-icons/md";
import { IoMdRadioButtonOn, IoIosCheckboxOutline } from "react-icons/io";
import { GoSingleSelect } from "react-icons/go";
import Button from "@mui/material/Button";
import TextInput from "../components/TextInput";
import RadioInput from "../components/RadioInput";
import SelectInput from "../components/SelectInput";
import CheckboxInput from "../components/CheckBoxInput";
import ButtonInput from "../components/ButtonInput";

const AddForms = () => {
  const [formElements, setFormElements] = useState([]);
  const [selectedElement, setSelectedElement] = useState(null);

  const handleAddInputElement = () => {
    setFormElements([...formElements, { type: "text" }]);
    setSelectedElement("text");
  };

  const handleAddRadioElement = () => {
    setFormElements([...formElements, { type: "radio" }]);
    setSelectedElement("radio");
  };

  const handleAddSelectElement = () => {
    setFormElements([...formElements, { type: "select" }]);
    setSelectedElement("select");
  };

  const handleAddCheckBoxElement = () => {
    setFormElements([...formElements, { type: "checkbox" }]);
    setSelectedElement("checkbox");
  };

  const handleAddButtonElement = () => {
    setFormElements([...formElements, { type: "button" }]);
    setSelectedElement("button");
  };

  const renderSelectedElement = () => {
    switch (selectedElement) {
      case "text":
        return <TextInput />;
      case "radio":
        return <RadioInput key="radio-input" />;
      case "select":
        return <SelectInput key="select-input" />;
      case "checkbox":
        return <CheckboxInput key="checkbox-input" />;
      case "button":
        return <ButtonInput key="button-input" />;
      default:
        return null;
    }
  };

  useEffect(() => {
    sessionStorage.setItem("formElements", JSON.stringify(formElements));
  }, [formElements]);

  return (
    <div>
      <Navbar />

      <div className="flex">
        <div className="flex">
          <Card className="m-2 p-2 h-screen">
            <TextField label="Form Name" />
            <CardContent>
              <div>
                <button onClick={() => handleAddInputElement()}>
                  <Card className="p-2 m-2">
                    <MdInput />
                    <Typography
                      sx={{ fontSize: 14 }}
                      color="text.secondary"
                      gutterBottom
                    >
                      Input
                    </Typography>
                  </Card>
                </button>
              </div>
              <div>
                <button onClick={() => handleAddRadioElement()}>
                  <Card className="p-2 m-2 ">
                    <IoMdRadioButtonOn />
                    <Typography
                      sx={{ fontSize: 14 }}
                      color="text.secondary"
                      gutterBottom
                    >
                      Radio
                    </Typography>
                  </Card>
                </button>
              </div>
              <div>
                <button onClick={() => handleAddSelectElement()}>
                  <Card className="p-2 m-2 ">
                    <GoSingleSelect />
                    <Typography
                      sx={{ fontSize: 14 }}
                      color="text.secondary"
                      gutterBottom
                    >
                      Select
                    </Typography>
                  </Card>
                </button>
              </div>
              <div>
                <button onClick={() => handleAddCheckBoxElement()}>
                  <Card className="p-2 m-2 ">
                    <IoIosCheckboxOutline />
                    <Typography
                      sx={{ fontSize: 14 }}
                      color="text.secondary"
                      gutterBottom
                    >
                      Checkbox
                    </Typography>
                  </Card>
                </button>
              </div>
              <div>
                <button onClick={() => handleAddButtonElement()}>
                  <Card className="p-2 m-2 ">
                    <p className="text-blue-700 font-[14] ">Button</p>
                  </Card>
                </button>
              </div>
            </CardContent>
            <div className="flex items-end">
              <Button variant="contained">Create form</Button>
            </div>
          </Card>
        </div>
        <div className="m-4">{renderSelectedElement()}</div>
      </div>
    </div>
  );
};

export default AddForms;




















////rough


// import React, { useState } from "react";
// import { Button, Card, IconButton, TextField, Typography } from "@mui/material";
// import axios from "axios";
// import { CiText } from "react-icons/ci";
// import { IoMdRadioButtonOn, IoIosCheckboxOutline } from "react-icons/io";
// import { GoSingleSelect } from "react-icons/go";
// import { MdOutlinePassword } from "react-icons/md";
// import Navbar from "../layout/Navbar";
// import { useSnackbar } from "notistack";

// import { RiDeleteBin2Fill } from "react-icons/ri";

// const InputFields = () => {
//   const [formName, setFormName] = useState();
//   const { enqueueSnackbar } = useSnackbar();

//   const fields = [
//     { name: "text", icon: <CiText /> },
//     { name: "password", icon: <MdOutlinePassword /> },
//     { name: "radio", icon: <IoMdRadioButtonOn /> },
//     { name: "checkbox", icon: <IoIosCheckboxOutline /> },
//     { name: "button", icon: <Button /> },
//     { name: "select", icon: <GoSingleSelect /> },
//   ];
//   const initialData = {
//     text: "",
//     password: "",
//     radio: "",
//     checkbox: false,
//     select: "",
//     button: "",
//   };
//   const [addedFields, setAddedFields] = useState([]);
//   const [allUserdata, setAllUserdata] = useState(initialData);

//   const handleSubmit = (field) => {
//     setAddedFields([
//       ...addedFields,
//       {
//         ...field,
//         value: field.name === "radio" ? "male" : "",
//         placeholder: "",
//         label: "",
//         options: field.name === "radio" ? ["male", "female", "other"] : [],
//         edit: false,
//       },
//     ]);
//   };

//   const handleChange = (index, event) => {
//     // Update the value, placeholder, label or options of the field
//     const { name, value, checked, type } = event.target;
//     setAllUserdata((prev) => ({
//       ...prev,
//       [name]: type === "checkbox" ? checked : value,
//     }));
//     const newFields = [...addedFields];
//     newFields[index][event.target.name] = event.target.value;
//     setAddedFields(newFields);
//   };

//   const handleEdit = (index) => {
//     const newFields = [...addedFields];
//     newFields[index].edit = !newFields[index].edit;
//     setAddedFields(newFields);
//   };

//   const handleDelete = (index) => {
//     const newFields = [...addedFields];
//     newFields.splice(index, 1);
//     setAddedFields(newFields);
//   };

//   const handleRadioDelete = (index, option) => {
//     // Delete an option from the field
//     const newFields = [...addedFields];
//     newFields[index].options = newFields[index].options.filter(
//       (opt) => opt !== option
//     );
//     setAddedFields(newFields);
//   };

//   const handleAdd = (index, event) => {
//     // Add a new option to the field
//     event.preventDefault();
//     const newFields = [...addedFields];
//     const newOption = event.target.newOption.value;
//     if (!newFields[index].options.includes(newOption)) {
//       newFields[index].options.push(newOption);
//       setAddedFields(newFields);
//     }
//     event.target.reset();
//   };

//   const handleSubmitForm = async () => {
//     const formData = {
//       formStructure: addedFields,
//       userData: allUserdata,
//     };

//     try {
//       await axios
//         .post("http://localhost:4000/form/formInputs", formData)
//         .then((response) => {
//           console.log(response);
//         })
//         .catch((error) => {
//           console.log(error);
//         });
//       setAddedFields([]);
//       setAllUserdata(initialData);
//     } catch (error) {
//       console.error("Error submitting form:", error);
//     }
//   };
//   const renderField = (field, index) => {
//     switch (field.name) {
//       case "text":
//       case "password":
//         return (
//           <TextField
//             type={field.name}
//             value={field.value}
//             onChange={(event) => handleChange(index, event)}
//             placeholder={field.placeholder}
//           />
//         );
//       case "radio":
//         return (
//           <div>
//             {field.options.map((option) => (
//               <div key={option}>
//                 <input
//                   type="radio"
//                   name="value"
//                   value={option}
//                   checked={field.value === option}
//                   onChange={(event) => handleChange(index, event)}
//                   className="form-radio"
//                 />
//                 <label htmlFor={option}>{option}</label>
//                 {field.edit && (
//                   <IconButton
//                     onClick={() => handleRadioDelete(index, option)}
//                     variant="contained"
//                   >
//                     <RiDeleteBin2Fill />
//                   </IconButton>
//                 )}
//               </div>
//             ))}
//           </div>
//         );
//       case "checkbox":
//         return (
//           <input
//             type="checkbox"
//             name="value"
//             checked={field.value}
//             onChange={(event) => handleChange(index, event)}
//             className="form-checkbox"
//           />
//         );
//       case "select":
//         return (
//           <select
//             name="value"
//             value={field.value}
//             onChange={(event) => handleChange(index, event)}
//             className="bg-gray-200"
//           >
//             {field.options.map((option) => (
//               <option key={option} value={option}>
//                 {option}
//               </option>
//             ))}
//           </select>
//         );
//       case "button":
//         return <button className="form-button">{field.value}</button>;
//       default:
//         return null;
//     }
//   };

//   return (
//     <div>
//       <Navbar />
//       <div className="flex  ">
//         <div className="h-full">
//           <div className="m-3">
//             <TextField
//               label="Form Name"
//               value={formName}
//               onChange={(e) => setFormName(e.target.value)}
//               name="Form Name"
//               margin="dense"
//             />
//           </div>
//           <Card className="h-full p-5 m-4 grid grid-rows-3 grid-flow-col  ">
//             {fields.map((field, index) => (
//               <div key={index}>
//                 <Button onClick={() => handleSubmit(field)}>
//                   <Card className="p-2 m-2 w-20 h-20 flex items-center justify-center flex-col ">
//                     <div>{field.icon}</div>
//                     <Typography
//                       sx={{ fontSize: 14 }}
//                       color="text.secondary"
//                       gutterBottom
//                     >
//                       {field.name}{" "}
//                     </Typography>
//                   </Card>
//                 </Button>
//               </div>
//             ))}
//           </Card>
//           <div className="m-3">
//             <Button onClick={handleSubmitForm} fullWidth variant="contained">
//               Submit Form
//             </Button>
//           </div>
//         </div>

//         <Card className="w-full m-3 p-3">
//           {addedFields.map((field, index) => (
//             <div key={index}>
//               {field.edit && (
//                 <div>
//                   {field.name !== "button" && (
//                     <div>
//                       <label>Label:</label>
//                       <input
//                         type="text"
//                         name="label"
//                         value={field.label}
//                         onChange={(event) => handleChange(index, event)}
//                         className="bg-gray-200"
//                       />
//                     </div>
//                   )}
//                   {(field.name === "text" || field.name === "password") && (
//                     <div>
//                       <label>Placeholder:</label>
//                       <input
//                         type="text"
//                         name="placeholder"
//                         value={field.placeholder}
//                         onChange={(event) => handleChange(index, event)}
//                         className="bg-gray-200"
//                       />
//                     </div>
//                   )}
//                   {(field.name === "radio" || field.name === "select") && (
//                     <div>
//                       <label>Options:</label>
//                       <form onSubmit={(event) => handleAdd(index, event)}>
//                         <input
//                           type="text"
//                           name="newOption"
//                           placeholder="Enter a new option"
//                           className="bg-gray-200"
//                         />
//                         <Button type="submit" variant="outlined">
//                           ADD
//                         </Button>
//                       </form>
//                     </div>
//                   )}
//                 </div>
//               )}
//               {field.label && <label>{field.label} : </label>}
//               {renderField(field, index)}
//               <div className="flex">
//                 <div className="m-2">
//                   <Button onClick={() => handleEdit(index)} variant="contained">
//                     {field.edit ? "SAVE" : "EDIT"}
//                   </Button>
//                 </div>
//                 <div className="m-2">
//                   <Button
//                     variant="contained"
//                     onClick={() => handleDelete(index)}
//                     color="error"
//                   >
//                     Delete
//                   </Button>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </Card>
//       </div>
//     </div>
//   );
// };
// export default InputFields;